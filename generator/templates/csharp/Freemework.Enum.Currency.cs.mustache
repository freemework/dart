// Copyright 2021 Freemework Team

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// 	http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ============================================================================================
//
// Auto-generated by
//
// https://github.com/freemework/enum.currency/generator/templates/csharp/Library.cs.mustache
//
// ============================================================================================

namespace Freemework.Enum.Currency
{
	using System;
	using System.Collections.Generic;
	using System.Linq;

	/// <summary>Internal static class uses as currencies bundle.</summary>
	internal static class Currencies
	{
{{#data}}
		/// <summary>Instance of the {{title}} currency</summary>
		public static readonly Types.{{code}} {{code}} = new _{{code}}();

{{/data}}
		/// <summary>Enumerable of all currencies</summary>
		internal static IEnumerable<Currency> AllCurrencies
		{
			get
			{
{{#data}}
				yield return Currencies.{{code}};
{{/data}}
			}
		}

		/// <summary>Parse currency code</summary>
		internal static Currency Parse(string currencyCode)
		{
			Currency? currency = Currencies.AllCurrencies.SingleOrDefault(c => c.Code == currencyCode);
			if (currency != null)
			{
				return currency;
			}

			throw new NotSupportedException($"Cannot parse currency. Not supported currencyCode: '{currencyCode}'.");
		}
{{#data}}

		/// <summary>Represents the {{title}} currency</summary>
{{=<% %>=}}
		[System.Diagnostics.DebuggerDisplay("{Code,nq}")]
<%={{ }}=%>
		private struct _{{code}} : Types.{{code}}
		{
			/// <summary>Gets currency code</summary>
			public string Code => "{{code}}";

			/// <summary>Gets currency exponent</summary>
			public uint Exponent => {{exponent}};

			/// <summary>Gets currency title</summary>
			public string Title => "{{title}}";

			/// <summary>Gets currency reference URL</summary>
			public Uri ReferenceURL => new Uri("{{referenceURL}}");
{{#iso4217}}

			/// <summary>Gets a  "numeric code" of ISO 4217</summary>
			public int NumericCode => {{iso4217}};
{{/iso4217}}
		} // struct _{{code}}
{{/data}}
	}

	/// <summary>Represents a currency interface</summary>
	public interface Currency
	{
		/// <summary>Gets currency code</summary>
		string Code { get; }

		/// <summary>Gets currency exponent</summary>
		uint Exponent { get; }

		/// <summary>Gets currency title</summary>
		string Title { get; }

		/// <summary>Gets currency reference URL</summary>
		Uri ReferenceURL { get; }

		/// <summary>Enumerable of all currencies</summary>
		public static IEnumerable<Currency> AllCurrencies => Currencies.AllCurrencies;

		/// <summary>Parse currency code</summary>
		public static Currency Parse(string currencyCode) => Currencies.Parse(currencyCode);
	}

	/// <summary>Represents a currency crytpo enum (mixin)</summary>
	public interface CurrencyCrypto : Currency
	{
{{#data}}
{{#isCrypto}}
		/// <summary>Instance of the {{title}} currency</summary>
		public static readonly Types.{{code}} {{code}} = Currencies.{{code}};

{{/isCrypto}}
{{/data}}
		/// <summary>Enumerable of all crypto currencies</summary>
		public static new IEnumerable<CurrencyCrypto> AllCurrencies
		{
			get
			{
{{#data}}
{{#isCrypto}}
				yield return CurrencyCrypto.{{code}};
{{/isCrypto}}
{{/data}}
			}
		}

		/// <summary>Parse crypto currency code</summary>
		public static new CurrencyCrypto Parse(string currencyCryptoCode)
		{
			CurrencyCrypto? currency = CurrencyCrypto.AllCurrencies.SingleOrDefault(c => c.Code == currencyCryptoCode);
			if (currency != null)
			{
				return currency;
			}

			throw new NotSupportedException($"Cannot parse currency crypto. Not supported currencyCryptoCode: '{currencyCryptoCode}'.");
		}
	}

	/// <summary>Represents a currency ISO 4217 enum (mixin)</summary>
	public interface CurrencyIso4217 : Currency
	{
{{#data}}
{{#iso4217}}
		/// <summary>Instance of the {{title}} currency</summary>
		public static readonly Types.{{code}} {{code}} = Currencies.{{code}};

{{/iso4217}}
{{/data}}
		/// <summary>Enumerable of all ISO 4217 currencies</summary>
		public static new IEnumerable<CurrencyIso4217> AllCurrencies
		{
			get
			{
{{#data}}
{{#iso4217}}
				yield return CurrencyIso4217.{{code}};
{{/iso4217}}
{{/data}}
			}
		}

		/// <summary>Parse crypto currency code</summary>
		public static new CurrencyIso4217 Parse(string currencyIso4217Code)
		{
			CurrencyIso4217? currency = CurrencyIso4217.AllCurrencies.SingleOrDefault(c => c.Code == currencyIso4217Code);
			if (currency != null)
			{
				return currency;
			}

			throw new NotSupportedException($"Cannot parse ISO 4217 currency. Not supported currencyIso4217Code: '{currencyIso4217Code}'.");
		}

		/// <summary>Gets a  "numeric code" of ISO 4217</summary>
		int NumericCode { get; }
	}

	/// <summary>Represents a currency fiat enum (mixin)</summary>
	public interface CurrencyFiat : Currency
	{
{{#data}}
{{#isFiat}}
		/// <summary>Instance of the {{title}} currency</summary>
		public static readonly Types.{{code}} {{code}} = Currencies.{{code}};

{{/isFiat}}
{{/data}}
		/// <summary>Enumerable of all fiat currencies</summary>
		public static new IEnumerable<CurrencyFiat> AllCurrencies
		{
			get
			{
{{#data}}
{{#isFiat}}
				yield return CurrencyFiat.{{code}};
{{/isFiat}}
{{/data}}
			}
		}

		/// <summary>Parse crypto currency code</summary>
		public static new CurrencyFiat Parse(string currencyFiatCode)
		{
			CurrencyFiat? currency = CurrencyFiat.AllCurrencies.SingleOrDefault(c => c.Code == currencyFiatCode);
			if (currency != null)
			{
				return currency;
			}

			throw new NotSupportedException($"Cannot parse fiat currency. Not supported currencyFiatCode: '{currencyFiatCode}'.");
		}
	}

	namespace Types
	{
{{#data}}
		/// <summary>Represents the {{title}} currency interface</summary>
		public interface {{code}} : Currency{{#isFiat}}, CurrencyFiat{{/isFiat}}{{#iso4217}}, CurrencyIso4217{{/iso4217}}{{#isCrypto}}, CurrencyCrypto{{/isCrypto}} { }

{{/data}}

		// namespace Types
	}
}