// Copyright 2021 Freemework Team

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// 	http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// ============================================================================================================================
//
// Auto-generated by
//
// https://github.com/freemework/enum.currency/generator/templates/csharp/Freemework.Enum.Currency.Serialization.cs.mustache
//
// ============================================================================================================================

namespace Freemework.Enum.Currency.Serialization.Native
{
	using System;
	using System.Text.Json.Serialization;

	/// <summary>Base Converts an Currency to or from JSON.</summary>
	public abstract class CurrencyJsonConverter<TCurrency> : JsonConverter<TCurrency> where TCurrency : Currency
	{
		/// <summary>Writes a specified Currency value as JSON.</summary>
		public override void Write(System.Text.Json.Utf8JsonWriter writer, TCurrency value, System.Text.Json.JsonSerializerOptions options)
		{
			writer.WriteStringValue(value.Code);
		}
	}

	/// <summary>Converts an Currency to or from JSON.</summary>
	public class CurrencyJsonConverter : CurrencyJsonConverter<Currency>
	{
		/// <summary>Reads and converts the JSON to type Currency.</summary>
		public override Currency Read(ref System.Text.Json.Utf8JsonReader reader, Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
		{
			System.Diagnostics.Debug.Assert(typeToConvert == typeof(Currency));
			string? value = reader.GetString();
			if (value == null)
			{
				throw new System.Text.Json.JsonException("Unexpected null value. Expected Currency value.");
			}
			return Currency.Parse(value);
		}
	}

	/// <summary>Converts an CurrencyCrypto to or from JSON.</summary>
	public sealed class CurrencyCryptoJsonConverter : CurrencyJsonConverter<CurrencyCrypto>
	{
		/// <summary>Reads and converts the JSON to type Currency.</summary>
		public override CurrencyCrypto Read(ref System.Text.Json.Utf8JsonReader reader, Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
		{
			System.Diagnostics.Debug.Assert(typeToConvert == typeof(CurrencyCrypto));
			string? value = reader.GetString();
			if (value == null)
			{
				throw new System.Text.Json.JsonException("Unexpected null value. Expected CurrencyCrypto value.");
			}
			return CurrencyCrypto.Parse(value);
		}
	}

	/// <summary>Converts an CurrencyFiat to or from JSON.</summary>
	public sealed class CurrencyFiatJsonConverter : CurrencyJsonConverter<CurrencyFiat>
	{
		/// <summary>Reads and converts the JSON to type Currency.</summary>
		public override CurrencyFiat Read(ref System.Text.Json.Utf8JsonReader reader, Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
		{
			System.Diagnostics.Debug.Assert(typeToConvert == typeof(CurrencyFiat));
			string? value = reader.GetString();
			if (value == null)
			{
				throw new System.Text.Json.JsonException("Unexpected null value. Expected CurrencyFiat value.");
			}
			return CurrencyFiat.Parse(value);
		}
	}

	/// <summary>Converts an CurrencyIso4217 to or from JSON.</summary>
	public sealed class CurrencyIso4217JsonConverter : CurrencyJsonConverter<CurrencyIso4217>
	{
		/// <summary>Reads and converts the JSON to type Currency.</summary>
		public override CurrencyIso4217 Read(ref System.Text.Json.Utf8JsonReader reader, Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
		{
			System.Diagnostics.Debug.Assert(typeToConvert == typeof(CurrencyIso4217));
			string? value = reader.GetString();
			if (value == null)
			{
				throw new System.Text.Json.JsonException("Unexpected null value. Expected CurrencyIso4217 value.");
			}
			return CurrencyIso4217.Parse(value);
		}
	}
}